<?php

namespace Wishlist\CoreBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Wishlist\CoreBundle\Entity\Token;
use Doctrine\ORM\Query\ResultSetMapping;

/**
 * TokenRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TokenRepository extends EntityRepository
{
    public function addNewToken($token, $tokenType, $user)
    {
        // first check if a token of this type for this user already exists
        $tokens = $this->findByUser($user->getWishlistuserId());
        
        for($i = 0; $i < count($tokens); $i++){
            if($tokens[$i]->getTokenType() == $tokenType)
            {
                return $tokens[$i]; // already exists
            }
        }
        
        $t = new Token();
        $t->setToken($token);
        $t->setTokenType($tokenType);
        $t->setUser($user);
        $t->setLastUpdated(new \DateTime('now'));

        if(!isset($t))
        {
            return;
        }

        $em = $this->getEntityManager();
        $em->persist($t);
        $em->flush();
        
        return $t;
    }   
    
    public function removeToken($token)
    {
        $this->getEntityManager()->remove($token);
        $this->getEntityManager()->flush();        
    }
    
    public function recycleOverdueTokens()
    {
        $rsm = new ResultSetMapping;
        $rsm->addEntityResult('Wishlist\CoreBundle\Entity\Token', 'e');
        $rsm->addFieldResult('e', 'id', 'id');
        $rsm->addFieldResult('e', 'token', 'token');
        $rsm->addFieldResult('e', 'tokenType', 'tokenType');
        $rsm->addFieldResult('e', 'lastUpdated', 'lastUpdated');
        
        // get all of the tokens for resetting password that have been in the database over 24 hours
        $q = $this->_em->createNativeQuery("
            SELECT *
            FROM Token e
            WHERE e.lastUpdated > date_add(now(), interval 1 DAY)", $rsm);
                      
        $tokens = $q->getResult();
        
        $tokenCount = 0;
        
        // remove them all
        if(isset($tokens))
        {
            $tokenCount = count($tokens);
            
            foreach($tokens as $token)
            {
                $this->removeToken($token);
            }            
        }
        
        return $tokenCount;
    }
}