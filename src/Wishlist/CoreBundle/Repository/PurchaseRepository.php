<?php

namespace Wishlist\CoreBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Wishlist\CoreBundle\Entity\WishlistUser;
use Wishlist\CoreBundle\Entity\WishlistItem;
use Wishlist\CoreBundle\Entity\Purchase;
use Wishlist\CoreBundle\Entity\Event;

/**
 * PurchaseRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PurchaseRepository extends EntityRepository
{
    
    /*
     * This function accepts either an event or a gift_date, but not both.
     */
    public function newPurchase(WishlistUser $user, WishlistItem $item, Event $event = NULL, \DateTime $gift_date = NULL)
    {
        if(isset($event) && isset($gift_date))
        {
            throw new \RuntimeException('Ambiguous notification date for puchase.');
        }
        
        $em = $this->getEntityManager();
        
        $newPurchase = new Purchase();
        $newPurchase->setUser($user);
        $newPurchase->setItem($item);
        if($event != NULL)
        {
            $newPurchase->setEvent($event);
            $newPurchase->setGiftDate($event->getEventDate());
        }else if($gift_date != NULL)
        {
            $newPurchase->setGiftDate($gift_date);
        }
        
        $item->setPurchase($newPurchase);
        
        $em->persist($newPurchase);
        $em->flush();
    }
    
    public function getPurchasesById(/*int*/ $uid)
    {
        $em = $this->getEntityManager();
        
        $q = $em->createQuery('
            SELECT p
            FROM WishlistCoreBundle:Purchase p
            LEFT JOIN p.user usr
            where usr.wishlistuser_id = :uid')
                ->setParameter('uid', $uid);
        
        return $q->getResult();
    }
    
    public function getPurchasesByUser(WishlistUser $user)
    {
        return $this->getPurchasesById($user->getWishlistuserId());
    }
}