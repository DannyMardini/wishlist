<?php

namespace Wishlist\CoreBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NoResultException;
use Wishlist\CoreBundle\Entity\WishlistUser;
use Doctrine\ORM\Query\ResultSetMapping;
use \DateTime;
use Wishlist\CoreBundle\Library\StoPasswordHash;

/**
 * WishlistUserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class WishlistUserRepository extends EntityRepository
{
    const MAX_USERS = 100;

    public function getUser($fullname)
    {
        return $this->findOneBy(array('name' => $fullname));
    }
    
    public function addUser(WishlistUser $user)
    {
        $em = $this->getEntityManager();
        
        if(!isset($user))
        {
            throw new \Exception("Error, user not defined!");
        }
        
        $em->persist($user);
        $em->flush();
    }
    
    public function addNewUser($name, DateTime $birthdate, $email, $gender, $password)
    {
        $user = new WishlistUser();
        
        $user->setBirthdate($birthdate);
        $user->setEmail($email);
        $user->setGender($gender);
        $user->setName($name);
        $user->setPassword($password);
        
        $this->addUser($user);        
    }
    
    public function validateEmailAndPassword( $email, $password )
    {
        try
        {                                                    
            $user = $this->findOneByEmail($email);
            
            if(!$user)
            {
                throw new \Exception("The email did not match any users in our system. <br /><br />-Wishlist Team");
            }

            if(StoPasswordHash::verifyPassword($password, $user->getPassword()))
            {
                return $user->getWishlistUserId();
            }
            else {
                throw new \Exception("Wrong password! Check it and try again. <br /><br />-Wishlist Team");
            }
            
        }catch(Exception $e)
        {
            throw new \Exception("The system could not validate your login information. Please try again. <br /><br />-Wishlist Team");
        }
    }
    
    public function getUserWithEmail( /*string*/ $email )
    {
        $user = $this->findOneBy(array('email' => $email));

        if(!isset ($user))
        {
            throw new NoResultException();
        }

        return $user;
    }
    
    public function getUserWithId( /*int*/ $id )
    {
        $user = $this->findOneBy(array('wishlistuser_id' => $id));
        
        if( !isset($user) ) {
            throw new NoResultException();
        }
        
        return $user;
    }
    
    public function updatePassword($password, $user)
    {
        $user->setPassword($password);
        $this->getEntityManager()->persist($user);
        $this->getEntityManager()->flush();
    }
    
    public function getFriendsOf(WishlistUser $user)
    {
        $friendships = $user->getFriendships();
        $friends = array();
        
        foreach($friendships as $friendship)
        {
            $friends[] = $this->getUserWithId($friendship->getFriendId());
        }
        
        return $friends;
    }
    
    //This function returns people who aren't this users friend using this search term.
    public function searchPersons(WishlistUser $user, /*string*/ $searchTerm)
    {
        if( strlen($searchTerm) == 0 )
        {
            return array();
        }
        
        $explodedSearchTerm = explode(' ', $searchTerm);
        
        $rsm = new ResultSetMapping();
        
        $rsm->addEntityResult('Wishlist\CoreBundle\Entity\WishlistUser', 'u');
        $rsm->addFieldResult('u', 'wishlistuser_id', 'wishlistuser_id');
        $rsm->addFieldResult('u', 'name', 'name');

        $sql = "SELECT u.wishlistuser_id, u.name FROM WishlistUser u WHERE (";
        foreach($explodedSearchTerm as $term)
        {
            $sql .= " (u.name LIKE '".$term."%' OR u.name LIKE '% ".$term."%') AND";
        }
        $sql = rtrim($sql, "AND");
        
        $sql .= ") AND u.wishlistuser_id not in ( select f.friend_id from Friendship f where f.user_id = ".$user->getWishlistuserId().") and u.wishlistuser_id != ".$user->getWishlistuserId();
        
        $q = $this->getEntityManager()->createNativeQuery($sql, $rsm);
        
        $results = $q->getResult();
        return $results;
    }
}
