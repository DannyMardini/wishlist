<?php

/**
 * wishlist_update
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    wishlist
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class wishlist_update extends Basewishlist_update
{
    public function createUpdate($type, $message, $datetime, $user_id)
    {     
        $template = "";
        
        switch ($type) // default templates
        {
            case 1: // Added Item
              $template = 1;
              break;
            case 2: // Removed Item
              $template = 1;
              break;
            case 3:  // Added new friend
              $template = 2;
              break;
            default:
              break;
        }
        
        $this->setTemplate($template);
        $this->setTemplate($type);
        $this->setTemplate($message);
        $this->setTemplate($datetime);
        $this->setTemplate($user_id);
    }


    public function getFormattedTimestamp()
    {                         
        $submittedDateTime = strtotime($this->getDatetime());        
        $thisYear = date('Y') == date('Y', $submittedDateTime);                      
        
        if ( $thisYear > 0 )
        {                     
            $thisWeek = date('W') == date('W', $submittedDateTime);      
            if( $thisWeek > 0 )
            {
                $yesterday = date('j', $submittedDateTime) == (date('j')-1);
                $today = date('j') == date('j', $submittedDateTime);
                
                if( $yesterday > 0 )
                {
                    return " Yesterday @ ".date("g:i a", $submittedDateTime);
                }
                else if( $today > 0 )
                {
                    return "Today @".date(" g:i a", $submittedDateTime); 
                }
                else
                {
                    return date(  "l \@ g:i a", $submittedDateTime); 
                }
            }
            else
            {
                return date(  "F jS \@ g:i a", $submittedDateTime); 
            }
        }
        else
        {                        
            $seconds = time() - $submittedDateTime;
            $days = round($seconds / (24*60*60));            
            
            $yesterday = $days <= 1;
            $thisWeek = (round($days / 7)) <= 1;
               
            if($yesterday > 0)
            {
                return " yesterday @ ".date("g:i a", $submittedDateTime);
            }
            else if($thisWeek > 0)
            {
                return date(  "l \@ g:i a", $submittedDateTime);
            }
            else
            {
                return date(  "F jS, Y, g:i a", $submittedDateTime); 
            }
        }
    }
    
    public function getFormattedTimestamp2()
    {
        $now = time();
        $submitted = new DateTime($this->getDateTime());
        $submittedTimeStamp = $submitted->getTimestamp();
        
        $seconds = $now - $submittedTimeStamp;
        $minutes = round($seconds / 60);
        $hours = round($minutes / 60);
        $days = round($hours / 24);
        $weeks = round($days / 7);  
        
        if( $weeks > 1) // just show the full date
        {
            return date(  "F j, Y, g:i a", $submittedTimeStamp);            
        }
        
        if( $weeks > 0 )
        {
            return $weeks." weeks ago";
            
        }else if( $days > 0 )
        {
            if($days >= 1 && $days < 2)
            {
                return " yesterday";
            }
            
            return $days." days ago";
            
        }else if( $hours > 0 )
        {
            if( $hours == 1 )
                return $hours." hour ago at ".date("g:i a", $submittedTimeStamp);
            
            return $hours." hours ago at ".date("g:i a", $submittedTimeStamp);
            
        }else if( $minutes > 0 )
        {
            return $minutes." minutes ago";
        }else
        {
            return $seconds." seconds ago";
        }
    }
}
